package com.leetCode._1__100_problems._46Permutations;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @Author: vellerzheng
 * @Description:
 * @Date:Created in 20:36 2018/6/21
 * @Modify By:
 *
 * 思路：
 *
 * 一、全排列
 *
 * where for the length of n, the permutations can be generated by
 * (1) Swap the 1st element with all the elements, including itself.
 * (2) Then the 1st element is fixed, go to the next element.
 * (3) Until the last element is fixed. Output.
 * It's more clear in the figure above. The key point is to make the big problem into smaller problem,
 * here is how to convert the length n permutation into length n-1 permutation problem.
 */
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();

         perm(nums, 0, (nums.length-1),res);

        return  res;
    }

    public void perm(int[] num, int k, int n,List<List<Integer>> res){
        List<Integer> nums = new ArrayList<Integer>();
        if(k == n ){
            for(int m : num){
                nums.add(m);
            }
           res.add(nums);
        }else{
            for(int i = k; i <= n; i++){
                int tmp = num[k];
                num[k] = num[i];
                num[i]  = tmp;

                perm(num, k+1, n, res);

                tmp = num[k];
                num[k] = num[i];
                num[i] = tmp;
            }
        }

    }


    public static void main(String[] args) {


        int [] candidate = {1,2,3};


        System.out.println("result: " + new Solution().permute(candidate));

    }
}